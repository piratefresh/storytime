generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model User {
  id                    String                  @id @default(uuid())
  email                 String
  emailVerified         Boolean                 @default(false)
  hashedPassword        String?
  firstName             String?
  lastName              String?
  emailVerificationCode EmailVerificationCode[]
  File                  File[]
  folder                Folder[]
  media                 Media[]
  oAuthAccount          OAuthAccount[]
  sessions              Session[]
  stories               Story[]
}

model OAuthAccount {
  providerId     String @id
  providerUserId String
  userId         String
  user           User   @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime @map("expires_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(uuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id          String      @id @default(uuid())
  title       String
  description String
  genre       String[]
  status      StoryStatus @default(UNSAVED)
  ownerId     String
  content     Json?
  assets      Asset[]
  characters  Character[]
  file        File[]
  folder      Folder[]
  media       Media[]
  settings    Setting[]
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  description String?
  tags        String[]
  folderView  FolderView @default(list)
  ownerId     String
  storyId     String?
  parentId    String?
  assets      Asset[]
  file        File[]
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parent      Folder?    @relation("FolderNesting", fields: [parentId], references: [id])
  children    Folder[]   @relation("FolderNesting")
  story       Story?     @relation(fields: [storyId], references: [id])
}

model File {
  id                     String                   @id @default(uuid())
  name                   String
  type                   String?
  url                    String?
  folderId               String?
  storyId                String?
  content                Json?
  userId                 String
  asset                  Asset[]
  character              Character[]
  folder                 Folder?                  @relation(fields: [folderId], references: [id])
  story                  Story?                   @relation(fields: [storyId], references: [id])
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileAssetReference     FileAssetReference[]
  fileCharacterReference FileCharacterReference[]
  fileSettingReference   FileSettingReference[]
  setting                Setting[]
}

model Asset {
  id                 String               @id @default(uuid())
  name               String
  type               String
  content            String
  description        String?
  tags               String[]
  folderId           String?
  storyId            String?
  fileId             String?
  file               File?                @relation(fields: [fileId], references: [id])
  folder             Folder?              @relation(fields: [folderId], references: [id])
  story              Story?               @relation(fields: [storyId], references: [id])
  fileAssetReference FileAssetReference[]
}

model Character {
  id                     String                   @id @default(uuid())
  name                   String
  description            String?
  storyId                String
  fileId                 String?
  file                   File?                    @relation(fields: [fileId], references: [id])
  story                  Story                    @relation(fields: [storyId], references: [id])
  CharacterQuest         CharacterQuest[]
  CharacterRelation      CharacterRelation[]
  fileCharacterReference FileCharacterReference[]
  quests                 Quest[]                  @relation("CharacterQuest")
}

model Quest {
  id             String           @id @default(uuid())
  name           String
  description    String?
  difficulty     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  characterQuest CharacterQuest[]
  settings       Setting[]
  characters     Character[]      @relation("CharacterQuest")
}

model Media {
  id        String    @id @default(uuid())
  type      MediaType
  url       String
  userId    String
  storyId   String?
  createdAt DateTime  @default(now())
  story     Story?    @relation(fields: [storyId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id                   String                 @id @default(uuid())
  name                 String
  description          String?
  location             String?
  storyId              String
  questId              String?
  fileId               String?
  fileSettingReference FileSettingReference[]
  file                 File?                  @relation(fields: [fileId], references: [id])
  Quest                Quest?                 @relation(fields: [questId], references: [id])
  story                Story                  @relation(fields: [storyId], references: [id])
}

model CharacterRelation {
  id                 String       @id @default(uuid())
  characterId        String
  relatedCharacterId String
  intensity          Int
  relationType       RelationType
  relatedCharacter   Character    @relation(fields: [relatedCharacterId], references: [id])

  @@unique([characterId, relatedCharacterId])
}

model CharacterQuest {
  characterId String
  questId     String
  role        String
  character   Character @relation(fields: [characterId], references: [id])
  quest       Quest     @relation(fields: [questId], references: [id])

  @@id([characterId, questId])
}

model FileAssetReference {
  fileId  String
  assetId String
  asset   Asset  @relation(fields: [assetId], references: [id])
  file    File   @relation(fields: [fileId], references: [id])

  @@id([fileId, assetId])
}

model FileCharacterReference {
  fileId      String
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  file        File      @relation(fields: [fileId], references: [id])

  @@id([fileId, characterId])
}

model FileSettingReference {
  fileId    String
  settingId String
  file      File    @relation(fields: [fileId], references: [id])
  setting   Setting @relation(fields: [settingId], references: [id])

  @@id([fileId, settingId])
}

enum RelationType {
  FAMILY
  FRIEND
  SPOUSE
  ALLY
  RIVAL
  ACQUAINTANCE
}

enum StoryStatus {
  PLANNING
  DRAFTING
  COMPLETED
  UNSAVED
}

enum MediaType {
  image
  video
}

enum FolderView {
  list
  grid
}

enum Genre {
  Adventure
  Romance
  Mystery
  Fantasy
  ScienceFiction
  Horror
  Thriller
  HistoricalFiction
  YoungAdult
  ChildrensFiction
  NonFiction
  Drama
  Comedy
  UrbanFantasy
  Paranormal
  Dystopian
  Steampunk
  Cyberpunk
  MagicalRealism
  LiteraryFiction
}
