// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String  @id @default(uuid())
  email          String
  emailVerified  Boolean @default(false)
  hashedPassword String?
  firstName      String?
  lastName       String?
  stories        Story[]

  sessions              Session[]
  oAuthAccount          OAuthAccount[]
  emailVerificationCode EmailVerificationCode[]
  media                 Media[]
  folder                Folder[]
}

model OAuthAccount {
  providerId     String @id
  providerUserId String
  userId         String

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(uuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id          String      @id @default(uuid())
  title       String
  description String
  genre       String[]
  status      StoryStatus @default(UNSAVED) // Set the default value here
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  assets      Asset[]
  characters  Character[]
  settings    Setting[]
  media       Media[]
  folder      Folder[]
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  description String?
  tags        String[]
  folderView  FolderView @default(list)
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  storyId     String?
  story       Story?     @relation(fields: [storyId], references: [id])
  assets      Asset[]
}

model Asset {
  id          String   @id @default(uuid())
  name        String
  type        String
  content     String
  description String?
  tags        String[]
  folderId    String? // Optional, assets can be unassigned initially
  folder      Folder?  @relation(fields: [folderId], references: [id])
  storyId     String?
  story       Story?   @relation(fields: [storyId], references: [id])
}

model Character {
  id          String  @id @default(uuid())
  name        String
  description String?
  storyId     String
  story       Story   @relation(fields: [storyId], references: [id])
}

model Media {
  id        String    @id @default(uuid())
  type      MediaType
  url       String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId   String?
  story     Story?    @relation(fields: [storyId], references: [id])
  createdAt DateTime  @default(now())
}

model Setting {
  id          String  @id @default(uuid())
  name        String
  description String?
  location    String?
  storyId     String
  story       Story   @relation(fields: [storyId], references: [id])
}

enum StoryStatus {
  PLANNING
  DRAFTING
  COMPLETED
  UNSAVED
}

enum MediaType {
  image
  video
}

enum FolderView {
  list
  grid
}

enum Genre {
  Adventure
  Romance
  Mystery
  Fantasy
  ScienceFiction
  Horror
  Thriller
  HistoricalFiction
  YoungAdult
  ChildrensFiction
  NonFiction
  Drama
  Comedy
  UrbanFantasy
  Paranormal
  Dystopian
  Steampunk
  Cyberpunk
  MagicalRealism
  LiteraryFiction
}
